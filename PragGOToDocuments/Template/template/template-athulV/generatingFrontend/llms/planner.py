import sys
import os
import threading
from colorama import Fore, Style


# Add the parent directory to the sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from prompts.frontendPrompts import akshayFrontendPlanner
from mainClasses.plannerClientRequest import PlannerClientRequest

class PageByPagePlanner:
    def __init__(self, PagePLAN, model):
        self.ModulePLAN = PagePLAN  # The list of module plans
        self.model = model
        self.prompt_template = akshayFrontendPlanner
        self.allOutputs = ""

    def process_module(self, module_plan, result_list, index):
        prompt = self.prompt_template.format(PagePLAN=[module_plan])  # Adjust prompt for individual module
        # Create a new PlannerClientRequest instance for each module plan
        client_request = PlannerClientRequest(prompt, self.model, "Simply follow the instruction above and generate each page as asked. ENSURE that it is extremely DETAILED", True)
        result = client_request.generate()
        result_list[index] = result

    def plannerOutput(self):
        # List to store results
        results = [None] * len(self.ModulePLAN)  # Initialize a list to store results

        # Threading function
        def thread_function(module_plan, index):
            self.process_module(module_plan, results, index)
        
        # Create and start threads for each module plan
        threads = []
        for index, module_plan in enumerate(self.ModulePLAN):
            thread = threading.Thread(target=thread_function, args=(module_plan, index))
            threads.append(thread)
            thread.start()
        
        # Wait for all threads to complete
        for thread in threads:
            thread.join()
        
        # Concatenate all results into a single string
        self.allOutputs = '\n\n'.join(results)
        return self.allOutputs

# Testing

# module_info = [
#     "### MODULE: Purchase Orders\n\n**Module Overview:**\n- **Purpose:** The Purchase Orders module is designed to streamline the process of creating, managing, and tracking purchase orders sent to vendors. It supports the overall application goals by ensuring that all purchase orders are standardized, easily accessible, and well-documented. This module addresses the business objective of maintaining organized and efficient procurement processes.\n- **Functionality:** \n  - Create new purchase orders using a standard template.\n  - Fill in purchase order details such as date, shipping address, company name, and item list.\n  - Download purchase orders in PDF or Excel format.\n  - View past purchase orders and their details.\n  - Access and view the PDF/Excel version of past purchase orders.\n- **Target Users:** \n  - Procurement team members who need to create and manage purchase orders.\n  - Finance team members who need to track and verify purchase orders.\n  - Managers who need to review and approve purchase orders.\n- **Key Features:** \n  - Purchase Order Form: A form to input purchase order details.\n  - Download Options: Buttons to download the purchase order in PDF or Excel format.\n  - Purchase Order History: A list or table displaying past purchase orders.\n  - Purchase Order Viewer: A feature to view the PDF/Excel version of past purchase orders.\n\n**General Colours:**\n- **Primary Colour:** #FFA500 (Orange)\n- **Secondary Colour:** #FFFFFF (White)\n- **Accent Colour:** #000000 (Black)\n- **Background Colour:** #F5F5F5 (Light Grey)\n- **Text Colour:** #333333 (Dark Grey)\n- **Link Colour:** #FFA500 (Orange)\n\n**PAGE 1: Purchase Order Form**\n- **Page Logic:**\n- **User Interactions:** \n  - Users fill in the purchase order form with details such as date, shipping address, company name, and item list.\n  - Users click on the \"Download PDF\" or \"Download Excel\" button to generate and download the purchase order.\n  - Users can navigate to the Purchase Order History page to view past orders.\n- **Business Logic:** \n  - Validate form inputs to ensure all required fields are filled.\n  - Generate a PDF or Excel file based on the form inputs.\n  - Save the purchase order details to a mock service or dummy data store.\n\n- **Components and Functionality:**\n- **Common Components:** \n  - TextInput: For entering text details like date, shipping address, and company name.\n  - Table: For listing items and their prices.\n  - Button: For actions like \"Download PDF\" and \"Download Excel\".\n  - SignatureField: For capturing the signature.\n- **Component Interactions:** \n  - The TextInput components will collect user inputs.\n  - The Table component will allow users to add, edit, and remove items.\n  - The Button components will trigger the download of the purchase order in the selected format.\n  - The SignatureField will capture the user's signature and include it in the generated document.\n\n- **Page Interactions:**\n- **Navigation:** \n  - Users can navigate to the Purchase Order History page using a link or button provided on the form page.\n\n**PAGE 2: Purchase Order History**\n- **Page Logic:**\n- **User Interactions:** \n  - Users can view a list or table of past purchase orders.\n  - Users can click on a specific purchase order to view its details.\n  - Users can click on a button to view the PDF/Excel version of a specific purchase order.\n- **Business Logic:** \n  - Fetch and display a list of past purchase orders from a mock service or dummy data store.\n  - Provide options to filter or search past purchase orders.\n\n- **Components and Functionality:**\n- **Common Components:** \n  - Table: For displaying the list of past purchase orders.\n  - Button: For actions like \"View PDF\" and \"View Excel\".\n- **Component Interactions:** \n  - The Table component will display past purchase orders with columns for date, company name, and status.\n  - The Button components will allow users to view the PDF/Excel version of the selected purchase order.\n\n- **Page Interactions:**\n- **Navigation:** \n  - Users can navigate back to the Purchase Order Form page using a link or button provided on the history page.",
#     "### MODULE: Assembly\n\n**Module Overview:**\n- **Purpose:** The Assembly module is designed to track and manage frames during the assembly process. It ensures that all frames are properly logged, deficiencies are noted, and workers can easily identify the frames they need to work on. This module supports the business objective of maintaining quality and efficiency in the assembly process.\n- **Functionality:** \n  - Log basic information such as time, date, frame details, and frame drawing.\n  - Allow workers to sign and note deficiencies.\n  - Track and display deficiencies in the statistics page.\n- **Target Users:** \n  - Assembly line workers who need to log and track frames.\n  - Quality control personnel who need to monitor deficiencies.\n  - Managers who need to oversee the assembly process.\n- **Key Features:** \n  - Frame Logging: A form to input frame details and log information.\n  - Deficiency Logging: A feature to note and track deficiencies.\n  - Frame Drawing Viewer: A feature to view the frame drawing.\n\n**General Colours:**\n- **Primary Colour:** #FFA500 (Orange)\n- **Secondary Colour:** #FFFFFF (White)\n- **Accent Colour:** #000000 (Black)\n- **Background Colour:** #F5F5F5 (Light Grey)\n- **Text Colour:** #333333 (Dark Grey)\n- **Link Colour:** #FFA500 (Orange)\n\n**PAGE 1: Frame Logging**\n- **Page Logic:**\n- **User Interactions:** \n  - Users fill in the frame logging form with details such as time, date, frame number, project, and frame type.\n  - Users can view the frame drawing.\n  - Users can sign and note any deficiencies.\n- **Business Logic:** \n  - Validate form inputs to ensure all required fields are filled.\n  - Save the frame details and deficiencies to a mock service or dummy data store.\n\n- **Components and Functionality:**\n- **Common Components:** \n  - TextInput: For entering text details like time, date, frame number, project, and frame type.\n  - ImageViewer: For displaying the frame drawing.\n  - SignatureField: For capturing the worker's signature.\n  - TextArea: For noting deficiencies.\n- **Component Interactions:** \n  - The TextInput components will collect user inputs.\n  - The ImageViewer will display the frame drawing.\n  - The SignatureField will capture the worker's signature.\n  - The TextArea will allow users to note deficiencies.\n\n- **Page Interactions:**\n- **Navigation:** \n  - Users can navigate to the Deficiency Tracking page using a link or button provided on the logging page.\n\n**PAGE 2: Deficiency Tracking**\n- **Page Logic:**\n- **User Interactions:** \n  - Users can view a list or table of logged deficiencies.\n  - Users can click on a specific deficiency to view its details.\n- **Business Logic:** \n  - Fetch and display a list of logged deficiencies from a mock service or dummy data store.\n\n- **Components and Functionality:**\n- **Common Components:** \n  - Table: For displaying the list of logged deficiencies.\n  - Button: For actions like \"View Details\".\n- **Component Interactions:** \n  - The Table component will display logged deficiencies with columns for date, frame number, and description.\n  - The Button components will allow users to view the details of the selected deficiency.\n\n- **Page Interactions:**\n- **Navigation:** \n  - Users can navigate back to the Frame Logging page using a link or button provided on the tracking page.",
#     "### MODULE: Glazing\n\n**Module Overview:**\n- **Purpose:** The Glazing module is designed to track and manage frames during the glazing process. It ensures that all frames are properly logged, deficiencies are noted, and workers can easily identify the frames they need to work on. This module supports the business objective of maintaining quality and efficiency in the glazing process.\n- **Functionality:** \n  - Log basic information such as time, date, frame details, and frame drawing.\n  - Allow workers to sign and note deficiencies.\n  - Track and display deficiencies in the statistics page.\n- **Target Users:** \n  - Glazing line workers who need to log and track frames.\n  - Quality control personnel who need to monitor deficiencies.\n  - Managers who need to oversee the glazing process.\n- **Key Features:** \n  - Frame Logging: A form to input frame details and log information.\n  - Deficiency Logging: A feature to note and track deficiencies.\n  - Frame Drawing Viewer: A feature to view the frame drawing.\n\n**General Colours:**\n- **Primary Colour:** #FFA500 (Orange)\n- **Secondary Colour:** #FFFFFF (White)\n- **Accent Colour:** #000000 (Black)\n- **Background Colour:** #F5F5F5 (Light Grey)\n- **Text Colour:** #333333 (Dark Grey)\n- **Link Colour:** #FFA500 (Orange)\n\n**PAGE 1: Frame Logging**\n- **Page Logic:**\n- **User Interactions:** \n  - Users fill in the frame logging form with details such as time, date, frame number, project, and frame type.\n  - Users can view the frame drawing.\n  - Users can sign and note any deficiencies.\n- **Business Logic:** \n  - Validate form inputs to ensure all required fields are filled.\n  - Save the frame details and deficiencies to a mock service or dummy data store.\n\n- **Components and Functionality:**\n- **Common Components:** \n  - TextInput: For entering text details like time, date, frame number, project, and frame type.\n  - ImageViewer: For displaying the frame drawing.\n  - SignatureField: For capturing the worker's signature.\n  - TextArea: For noting deficiencies.\n- **Component Interactions:** \n  - The TextInput components will collect user inputs.\n  - The ImageViewer will display the frame drawing.\n  - The SignatureField will capture the worker's signature.\n  - The TextArea will allow users to note deficiencies.\n\n- **Page Interactions:**\n- **Navigation:** \n  - Users can navigate to the Deficiency Tracking page using a link or button provided on the logging page.\n\n**PAGE 2: Deficiency Tracking**\n- **Page Logic:**\n- **User Interactions:** \n  - Users can view a list or table of logged deficiencies.\n  - Users can click on a specific deficiency to view its details.\n- **Business Logic:** \n  - Fetch and display a list of logged deficiencies from a mock service or dummy data store.\n\n- **Components and Functionality:**\n- **Common Components:** \n  - Table: For displaying the list of logged deficiencies.\n  - Button: For actions like \"View Details\".\n- **Component Interactions:** \n  - The Table component will display logged deficiencies with columns for date, frame number, and description.\n  - The Button components will allow users to view the details of the selected deficiency.\n\n- **Page Interactions:**\n- **Navigation:** \n  - Users can navigate back to the Frame Logging page using a link or button provided on the tracking page."
# ]


# randObj = PageByPagePlanner(module_info, "gpt-4o")
# output = randObj.plannerOutput()
# print(output)