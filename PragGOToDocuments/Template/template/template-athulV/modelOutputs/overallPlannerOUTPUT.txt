### PAGE: Dashboard

Overview:
- Purpose: The Dashboard page serves as the primary interface for managers to monitor and track the status of ongoing projects related to frame manufacturing. It provides real-time updates, visual indicators of progress, and alerts for any issues, ensuring efficient management of tasks.
- Core Functionality: The core functionality of this page includes displaying project metrics, real-time updates, alerts, interactive data visualizations, and a summary of key statistics. It handles data presentation and user interactions to facilitate decision-making.
- Target Users: The primary users are project managers and supervisors who need to oversee project progress, identify and address issues, and ensure timely completion of tasks.

Functional Specification:
- Key Features:
  - Project Overview: Displays a high-level summary of ongoing projects with key metrics such as frames assembled, glazed, installed, and project status. Utilizes progress bars and pie charts for visual representation.
  - Real-time Updates: Shows real-time data from various modules (assembly, glazing, installation, work orders). Auto-refreshes at regular intervals and allows manual refresh.
  - Alerts and Notifications: Highlights important updates or issues with visual alerts categorized by priority. Alerts for delayed work orders, deficiencies, and pending installations.
  - Interactive Data Visualizations: Includes graphs, charts, and tables that users can interact with. Clicking on a project in a bar chart drills down into detailed project information. Allows filtering/sorting by date, project name, and frame type.
  - Statistics Summary: Provides a consolidated view of key statistics such as total frames processed, deficiencies logged, and work orders completed. Data exportable in PDF or Excel format.

- Data Handling: 
  - Data is fetched from the ERP system in real-time and stored in memory.
  - Data manipulation includes calculating progress percentages, filtering/sorting project lists, and generating visual representations.
  
- User Interactions:
  - Clicking on visual elements (e.g., bar charts, progress bars) to view detailed project information.
  - Manual refresh button to update data.
  - Filtering and sorting options for data tables.
  - Export buttons for downloading statistics.

- Business Logic Implementation:
  - Calculations for progress percentages and status indicators.
  - Decision logic for categorizing alerts based on priority.
  - Data filtering and sorting mechanisms.

- State Management:
  - Managed using React state and context APIs.
  - State includes project data, real-time updates, alert statuses, and user preferences (e.g., selected filters).
  - State changes occur in response to data fetch, user interactions, and periodic refreshes.

Component Breakdown:
- Core Components:
  - ProjectSummary: Displays key metrics and progress indicators for projects.
  - RealTimeUpdates: Shows live data from various modules.
  - AlertsNotifications: Highlights important updates and issues.
  - DataVisualizations: Includes interactive charts and graphs.
  - StatisticsSummary: Provides a summary of key statistics with export options.
  
- Reusable Components:
  - ProgressBar: Used for visualizing project progress.
  - Alert: Used for displaying notifications.
  - DataTable: Used for displaying tabular data with sorting/filtering capabilities.
  - ExportButton: Used for exporting data to PDF or Excel.

- Component Interactions:
  - Data flows from the RealTimeUpdates component to ProjectSummary, AlertsNotifications, and DataVisualizations.
  - User interactions with DataVisualizations update the state to show detailed project information.
  - AlertsNotifications component listens for changes in alert statuses.

Navigation Flow:
- Intra-Page Navigation:
  - Users navigate between different sections (ProjectSummary, RealTimeUpdates, AlertsNotifications, DataVisualizations, StatisticsSummary) by clicking on visual elements or using navigation buttons.
  - State persistence ensures that filters and selected projects remain consistent as users navigate.

Styling (For Contextual Consistency):
- General Colour Scheme:
  - Primary Colour: #FFA500 (Orange)
  - Secondary Colour: #FFFFFF (White)
  - Accent Colour: #FFD700 (Gold)
  - Background Colour: #F5F5F5 (Light Grey)
  - Text Colour: #000000 (Black)
  - Link Colour: #FFA500 (Orange)### PAGE: Dashboard

Overview:
- Purpose: The Dashboard page serves as the central hub for monitoring and tracking all activities related to frame assembly, glazing, installation, and shipping. It provides a high-level overview of ongoing projects, real-time updates, alerts, and key statistics, enabling managers to make informed decisions quickly.
- Core Functionality: The essential functions of the Dashboard page include displaying project progress, real-time data updates, alerts and notifications, interactive data visualizations, and a summary of key statistics. It handles the retrieval and presentation of data while facilitating user interactions for detailed insights.
- Target Users: The primary users are project managers and supervisors who oversee the frame manufacturing process. They need to monitor progress, identify issues, and make timely decisions to ensure project efficiency and quality.

Functional Specification:
- Key Features:
  - Project Overview: Displays key metrics like the number of frames assembled, glazed, and installed, along with project statuses using progress bars and pie charts.
  - Real-time Updates: Shows real-time data from various modules, auto-refreshing at regular intervals or via manual refresh.
  - Alerts and Notifications: Highlights important updates or issues with easily visible, categorized alerts.
  - Interactive Data Visualizations: Provides graphs, charts, and tables that allow drilling down into detailed project information and filtering/sorting data.
  - Statistics Summary: Gives a consolidated view of key statistics across all modules, with export options in PDF or Excel formats.
- Data Handling: The page processes data by fetching it from a mock API or static JSON files, storing it in memory using React state or context, and manipulating it for display and interaction.
- User Interactions: Users interact through clicking on visual elements (e.g., charts), filtering data, and responding to alerts. These interactions trigger data retrieval, state updates, and visual changes.
- Business Logic Implementation: The page implements logic for calculating progress percentages, determining alert priorities, and updating data in real-time.
- State Management: State is managed using Reactâ€™s useState and useEffect hooks, with context for sharing state across components. Data flows from parent components to children via props, and state updates in response to user actions or data changes.

- Component Breakdown:
  - Core Components:
    - ProjectOverview: Displays high-level project metrics with progress bars and pie charts.
    - RealTimeUpdates: Fetches and displays real-time data, with auto-refresh functionality.
    - AlertsNotifications: Shows categorized alerts and notifications.
    - DataVisualizations: Renders interactive graphs, charts, and tables.
    - StatisticsSummary: Provides a summary of key statistics across modules.
  - Reusable Components:
    - ProgressBar: A reusable component for displaying progress in various parts of the page.
    - Alert: A component for rendering alert messages with different priority levels.
    - Chart: A generic chart component that can be configured for different data visualizations.
  - Component Interactions: Data flows from parent components (Dashboard) to child components (ProjectOverview, RealTimeUpdates, etc.) via props. User interactions in child components trigger state updates in the parent component, which then cascade down to re-render the necessary child components.

Navigation Flow:
- Intra-Page Navigation: Users navigate between different sections through tabs or menu links within the Dashboard page. Clicking on a project in the ProjectOverview component takes the user to a detailed view within the DataVisualizations component. State persistence ensures that relevant data is maintained during navigation, and data transfer occurs through context or props.

Styling (For Contextual Consistency):
- General Colour Scheme:
  - Primary Colour: #FFA500 (Orange)
  - Secondary Colour: #FFFFFF (White)
  - Accent Colour: #FF4500 (OrangeRed)
  - Background Colour: #F0F0F0 (Light Grey)
  - Text Colour: #333333 (Dark Grey)
  - Link Colour: #FFA500 (Orange)

### PAGE: User Management

Overview:
- Purpose: The User Management page is designed to handle the administration of user accounts within the ERP system. It allows for the creation, editing, and deletion of user profiles, managing roles and permissions, and tracking user activity.
- Core Functionality: The page provides functionalities for adding new users, updating user information, assigning roles, and viewing user activity logs. It handles user data securely and ensures that only authorized personnel can make changes.
- Target Users: The primary users are system administrators and HR managers who manage user access and roles within the ERP system.

Functional Specification:
- Key Features:
  - User List: Displays a list of all users with options to search, filter, and sort.
  - User Form: A form for creating and editing user profiles, including fields for personal information, role assignments, and permissions.
  - Role Management: Allows for the assignment and management of roles and permissions for each user.
  - Activity Log: Shows a log of user activities and changes made within the system.
- Data Handling: Data is processed through form inputs and API calls for creating, updating, and deleting users. State is managed using React state and context.
- User Interactions: Users interact through form submissions, selecting users from the list, and assigning roles. These interactions trigger state updates and data fetching.
- Business Logic Implementation: Implements validation rules for user input, role-based access control, and logging of user activities.
- State Management: Uses Reactâ€™s useState and useEffect hooks for managing form state and user data. Context is used for sharing state across components.

- Component Breakdown:
  - Core Components:
    - UserList: Displays and manages the list of users.
    - UserForm: A form for creating and editing user profiles.
    - RoleManagement: Handles role assignments and permissions.
    - ActivityLog: Shows user activity logs.
  - Reusable Components:
    - TextInput: A reusable input component for text fields.
    - SelectInput: A dropdown component for selecting roles.
    - Modal: A component for displaying forms in a modal dialog.
  - Component Interactions: Data flows from parent components (UserManagement) to child components (UserList, UserForm, etc.) via props. User interactions in child components trigger state updates in the parent component, which then cascade down to re-render the necessary child components.

Navigation Flow:
- Intra-Page Navigation: Users navigate between different sections through tabs or menu links within the User Management page. Selecting a user from the UserList opens the UserForm for editing. Changes in state ensure that relevant data is maintained during navigation.

Styling (For Contextual Consistency):
- General Colour Scheme:
  - Primary Colour: #FFA500 (Orange)
  - Secondary Colour: #FFFFFF (White)
  - Accent Colour: #FF4500 (OrangeRed)
  - Background Colour: #F0F0F0 (Light Grey)
  - Text Colour: #333333 (Dark Grey)
  - Link Colour: #FFA500 (Orange)### PAGE: Dashboard

Overview:
- Purpose: The Dashboard page serves as the central hub for monitoring and tracking all activities related to frame manufacturing projects. It provides a high-level summary of ongoing projects and real-time updates, helping managers make data-driven decisions and ensuring efficient project management.
- Core Functionality: The Dashboard displays key metrics such as the number of frames assembled, glazed, and installed, along with the status of each project. It includes visual indicators like progress bars and pie charts for quick progress assessment. Additionally, it features real-time data updates, alerts, and notifications for important updates or issues.
- Target Users: The primary users of this page are project managers and team leaders who need to monitor project progress, identify bottlenecks, and ensure timely completion of tasks.

Functional Specification:
- Key Features:
  - Data Handling: The page fetches real-time data from the assembly, glazing, installation, and work orders modules. This data is stored in the page's state and updated periodically.
  - User Interactions: Users can interact with visual indicators like progress bars and pie charts, click on specific projects to drill down into detailed information, and filter or sort data by different criteria.
  - Business Logic Implementation: The page calculates the overall progress of each project based on the number of frames assembled, glazed, and installed. It also categorizes alerts and notifications by priority.
  - State Management: The page manages state using React's useState and useEffect hooks. Data is fetched from APIs and stored in state variables, which are then used to render the visual indicators and other components.

- Component Breakdown:
  - Core Components:
    - ProjectSummary: Displays key metrics and the status of each project using progress bars and pie charts.
    - RealTimeUpdates: Shows real-time data from different modules with auto-refresh functionality.
    - AlertsNotifications: Highlights important updates or issues with categorized alerts.
    - InteractiveVisualizations: Includes graphs, charts, and tables that allow users to interact with the data.
  - Reusable Components:
    - ProgressBar: A reusable component to display progress in a visual format.
    - PieChart: A reusable component for displaying data in a pie chart format.
    - DataTable: A reusable table component for displaying data with sorting and filtering options.
  - Component Interactions: Data flows from the parent Dashboard component to child components via props. User interactions with visual indicators or filters trigger state updates in the parent component, which are then propagated to the child components.

Navigation Flow:
- Intra-Page Navigation: Users navigate between different sections of the Dashboard (e.g., ProjectSummary, RealTimeUpdates) by clicking on tabs or buttons. The state is managed centrally in the Dashboard component, and data is passed to different sections as needed. Data transfer occurs through props, and state persistence is managed using React hooks.

Styling (For Contextual Consistency):
- General Colour Scheme: 
  - Primary Colour: #FFA500 (Orange)
  - Secondary Colour: #FFFFFF (White)
  - Accent Colour: #000000 (Black)
  - Background Colour: #F0F0F0 (Light Grey)
  - Text Colour: #333333 (Dark Grey)
  - Link Colour: #FFA500 (Orange)

### PAGE: User Management

Overview:
- Purpose: The User Management page allows administrators to manage user accounts within the ERP system. This includes creating, editing, and deleting user accounts, as well as assigning roles and permissions.
- Core Functionality: The page provides a list of existing users, along with options to add new users, edit user details, and delete users. It also includes functionality to assign roles and permissions to users.
- Target Users: The primary users of this page are system administrators and HR personnel responsible for managing user accounts and roles.

Functional Specification:
- Key Features:
  - Data Handling: The page fetches user data from a mock API and stores it in the page's state. User actions like adding, editing, or deleting users update the state accordingly.
  - User Interactions: Users can interact with forms to add or edit user details, buttons to delete users, and dropdowns to assign roles and permissions.
  - Business Logic Implementation: The page includes validation logic for user input (e.g., email format, required fields) and business rules for role assignments (e.g., certain roles may have restrictions).
  - State Management: The page manages state using React's useState and useEffect hooks. User data is stored in state variables, and updates are handled via state setters.

- Component Breakdown:
  - Core Components:
    - UserList: Displays a list of existing users with options to edit or delete each user.
    - UserForm: A form for adding or editing user details, including fields for name, email, and role.
    - RoleAssignment: A component for assigning roles and permissions to users via dropdowns.
  - Reusable Components:
    - TextInput: A reusable input field component for text input.
    - Button: A reusable button component for actions like submit, edit, and delete.
    - Dropdown: A reusable dropdown component for selecting roles and permissions.
  - Component Interactions: Data flows from the parent UserManagement component to child components via props. User interactions with forms and buttons trigger state updates in the parent component, which are then propagated to the child components.

Navigation Flow:
- Intra-Page Navigation: Users navigate between different sections of the User Management page (e.g., UserList, UserForm) by clicking on tabs or buttons. The state is managed centrally in the UserManagement component, and data is passed to different sections as needed. Data transfer occurs through props, and state persistence is managed using React hooks.

Styling (For Contextual Consistency):
- General Colour Scheme: 
  - Primary Colour: #FFA500 (Orange)
  - Secondary Colour: #FFFFFF (White)
  - Accent Colour: #000000 (Black)
  - Background Colour: #F0F0F0 (Light Grey)
  - Text Colour: #333333 (Dark Grey)
  - Link Colour: #FFA500 (Orange)### PAGE: Dashboard

Overview:
- Purpose: The Dashboard serves as the central hub for monitoring and tracking all activities related to the frame manufacturing projects. It provides a high-level overview of ongoing projects, real-time updates, alerts, and notifications, along with interactive data visualizations. This page addresses the business objective of efficiently managing and overseeing the frame assembly, glazing, installation, and shipping processes.
- Core Functionality: The Dashboard's primary functions include displaying project summaries, offering real-time updates, highlighting alerts and notifications, and presenting interactive data visualizations. It processes and displays data from various modules (assembly, glazing, installation) and ensures users can interact with and drill down into detailed project information.
- Target Users: The primary users of this page are project managers and supervisors who need to monitor project progress, identify issues, and make informed decisions. They are expected to perform tasks such as reviewing project status, responding to alerts, and analyzing performance metrics.

Functional Specification:
- Key Features:
  - Project Overview: Displays key metrics for ongoing projects, including the number of frames assembled, glazed, and installed, along with project status. Utilizes visual indicators like progress bars and pie charts.
  - Real-time Updates: Shows up-to-date data from the assembly, glazing, installation, and work orders modules. Auto-refreshes at regular intervals or on user demand.
  - Alerts and Notifications: Highlights important updates or issues, such as delayed work orders or deficiencies logged. Categorizes alerts by priority.
  - Interactive Data Visualizations: Provides graphs, charts, and tables that allow users to interact with the data, filter, sort, and drill down into specific project details.
  - Statistics Summary: Presents consolidated key statistics, such as total frames processed and work orders completed, with export options in PDF or Excel format.

- Data Handling: 
  - Data is fetched from APIs or dummy data sources and stored in local state variables.
  - Real-time data is periodically refreshed using timers or user-triggered actions.
  - Data is manipulated to generate visual indicators, summaries, and detailed views based on user interactions.

- User Interactions:
  - Users can click on visual indicators (e.g., progress bars) to view detailed project information.
  - Alerts can be clicked to view issue details and take corrective actions.
  - Interactive charts and tables allow users to filter, sort, and drill down into data.
  - Export buttons enable users to download statistics summaries in PDF or Excel formats.

- Business Logic Implementation:
  - Rules for categorizing alerts by priority.
  - Calculations for project progress and metrics summaries.
  - Decision-making processes for highlighting critical updates or deficiencies.

- State Management: 
  - Utilizes React state and context API for managing local state.
  - State changes in response to user actions, such as clicking on visual indicators or receiving real-time updates.
  - Data flow between components is managed through props drilling or context, ensuring synchronized state across the dashboard.

Component Breakdown:
- Core Components:
  - ProjectSummary: Displays high-level metrics and visual indicators for ongoing projects.
  - RealTimeUpdates: Shows real-time data from various modules with auto-refresh functionality.
  - Alerts: Highlights important updates and issues with categorized priorities.
  - DataVisualizations: Provides interactive graphs, charts, and tables for data analysis.
  - StatisticsSummary: Presents key statistics with export options.

- Reusable Components:
  - ProgressBar: Visual indicator for project progress.
  - NotificationBadge: Displays alerts and notifications.
  - DataTable: Interactive table for data display and manipulation.

- Component Interactions:
  - ProjectSummary interacts with RealTimeUpdates to fetch and display current project metrics.
  - Alerts component updates based on real-time data and user actions.
  - DataVisualizations component fetches data based on user interactions and filters.
  - StatisticsSummary aggregates data from other components for summary display and export.

Navigation Flow:
- Intra-Page Navigation:
  - Users can navigate between sections (Project Overview, Real-time Updates, Alerts, Data Visualizations, Statistics Summary) by clicking on corresponding tabs or buttons.
  - Clicking on visual indicators or alerts opens detailed views or modals with more information.
  - Data filters and sort options within the DataVisualizations component allow for dynamic data manipulation without leaving the page.

Styling (For Contextual Consistency):
- General Colour Scheme:
- Primary Colour: #FFA500 (Orange)
- Secondary Colour: #FFFFFF (White)
- Accent Colour: #FF4500 (OrangeRed)
- Background Colour: #F8F8F8 (Light Grey)
- Text Colour: #333333 (Dark Grey)
- Link Colour: #1E90FF (Dodger Blue)### PAGE: Client Overview

#### Overview:
- **Purpose:** The Client Overview page is designed to provide a high-level summary of all clients, showcasing key metrics such as status, recent interactions, and contract details. This page aims to give users a quick and comprehensive view of client-related data, helping them manage and prioritize client interactions effectively.
- **Core Functionality:** 
  - Display a summary of all clients with essential metrics.
  - Highlight key information such as client status, recent interactions, and contract details.
  - Use visual indicators to show upcoming meetings or contract renewals.
- **Target Users:** 
  - Account managers who need a quick summary of client statuses.
  - Sales representatives looking to track recent client interactions.
  - Managers overseeing client engagement and contract renewals.

#### Functional Specification:
- **Key Features:**
  - **Client List:** Display a list of clients with key metrics such as status, recent interactions, and contract details.
  - **Visual Indicators:** Show visual cues for important events like upcoming meetings or contract renewals.
  - **Sorting and Filtering:** Allow users to sort and filter clients based on different criteria (e.g., status, last interaction date).

- **Data Handling:**
  - Use predefined dummy data to simulate client information.
  - Data is stored in memory and manipulated within the page for sorting and filtering operations.

- **User Interactions:**
  - Users can click on a client to view detailed information.
  - Filtering options to narrow down the list based on specific criteria.
  - Sorting functionality to arrange clients based on different metrics.

- **Business Logic Implementation:**
  - Conditional rendering for highlighting upcoming meetings or renewals.
  - Sorting and filtering logic for client list manipulation.

- **State Management:**
  - Use React's `useState` and `useEffect` hooks to manage client data and UI state.
  - Maintain a state for the list of clients, current filters, and sorting criteria.

#### Component Breakdown:
- **Core Components:**
  - `ClientList`: Displays the list of clients with key metrics.
  - `ClientCard`: A reusable component for displaying individual client details.
  - `FilterBar`: Provides filtering options for the client list.
  - `SortMenu`: Allows users to sort the client list based on different criteria.

- **Reusable Components:**
  - `ClientCard`: Can be reused across different pages or sections where client details need to be displayed.
  - `VisualIndicator`: A component for showing visual cues for important events, reusable in other contexts.

- **Component Interactions:**
  - `ClientList` fetches data and renders `ClientCard` components for each client.
  - `FilterBar` and `SortMenu` update the state in `ClientList`, triggering re-renders with the filtered/sorted data.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - Users can navigate through the client list and click on individual clients to view more details.
  - Filtering and sorting options dynamically update the client list without navigating away from the page.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #1976D2 (Blue)
  - **Secondary Colour:** #FFFFFF (White)
  - **Accent Colour:** #FF4081 (Pink)
  - **Background Colour:** #F5F5F5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976D2 (Blue)

#### Relevant File Paths:
- `src/pages/ClientOverview.js`
- `src/components/ClientList.js`
- `src/components/ClientCard.js`
- `src/components/FilterBar.js`
- `src/components/SortMenu.js`

---

### PAGE: Interaction History

#### Overview:
- **Purpose:** The Interaction History page provides detailed metrics on client interactions, including meetings, calls, and emails. It uses visual representations such as progress bars and pie charts to help users analyze client engagement.
- **Core Functionality:** 
  - Display metrics on different types of client interactions.
  - Use charts and visual aids to represent interaction data.
  - Allow users to filter and sort interaction history based on various criteria.
- **Target Users:** 
  - Account managers tracking client engagement.
  - Sales representatives analyzing interaction effectiveness.
  - Managers overseeing overall client communication efforts.

#### Functional Specification:
- **Key Features:**
  - **Interaction Metrics:** Show metrics on meetings, calls, and emails.
  - **Visual Representations:** Use charts (e.g., progress bars, pie charts) to display interaction data.
  - **Filtering and Sorting:** Enable users to filter and sort interaction history.

- **Data Handling:**
  - Use dummy data to simulate interaction metrics.
  - Data is processed in memory for filtering and sorting.

- **User Interactions:**
  - Users can filter interaction history to view specific types of interactions.
  - Sorting options allow users to arrange interaction data based on different metrics.

- **Business Logic Implementation:**
  - Logic for calculating metrics and rendering charts.
  - Conditional rendering based on filter and sort criteria.

- **State Management:**
  - Use React's `useState` and `useEffect` hooks to manage interaction data and UI state.
  - Maintain state for interaction metrics, current filters, and sorting criteria.

#### Component Breakdown:
- **Core Components:**
  - `InteractionMetrics`: Displays metrics on client interactions.
  - `InteractionChart`: A component for rendering charts based on interaction data.
  - `FilterBar`: Provides filtering options for interaction history.
  - `SortMenu`: Allows users to sort interaction data.

- **Reusable Components:**
  - `InteractionChart`: Can be reused to display different types of interaction data.
  - `FilterBar` and `SortMenu`: Reusable for filtering and sorting in other pages.

- **Component Interactions:**
  - `InteractionMetrics` fetches data and renders `InteractionChart` components.
  - `FilterBar` and `SortMenu` update the state in `InteractionMetrics`, triggering re-renders with filtered/sorted data.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - Users can filter and sort interaction data without navigating away from the page.
  - Clicking on a specific interaction type in the chart can provide more detailed data.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #1976D2 (Blue)
  - **Secondary Colour:** #FFFFFF (White)
  - **Accent Colour:** #FF4081 (Pink)
  - **Background Colour:** #F5F5F5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976D2 (Blue)

#### Relevant File Paths:
- `src/pages/InteractionHistory.js`
- `src/components/InteractionMetrics.js`
- `src/components/InteractionChart.js`
- `src/components/FilterBar.js`
- `src/components/SortMenu.js`

---

### PAGE: Contract Status

#### Overview:
- **Purpose:** The Contract Status page provides an overview of client contracts, highlighting those nearing expiration and their renewal statuses. This helps users manage contract renewals efficiently and avoid lapses.
- **Core Functionality:** 
  - Display a list of client contracts with their statuses.
  - Highlight contracts that are nearing expiration.
  - Allow users to filter and sort contracts based on different criteria.
- **Target Users:** 
  - Account managers overseeing contract renewals.
  - Sales representatives managing ongoing contracts.
  - Managers ensuring timely contract renewals.

#### Functional Specification:
- **Key Features:**
  - **Contract List:** Show a list of client contracts with their statuses.
  - **Expiration Alerts:** Highlight contracts nearing expiration.
  - **Filtering and Sorting:** Enable users to filter and sort contracts.

- **Data Handling:**
  - Use dummy data to simulate contract details.
  - Data is processed in memory for filtering and sorting.

- **User Interactions:**
  - Users can filter contracts to view specific statuses or expiration dates.
  - Sorting options allow users to arrange contracts based on different criteria.

- **Business Logic Implementation:**
  - Logic for determining contracts nearing expiration.
  - Conditional rendering based on filter and sort criteria.

- **State Management:**
  - Use React's `useState` and `useEffect` hooks to manage contract data and UI state.
  - Maintain state for contract details, current filters, and sorting criteria.

#### Component Breakdown:
- **Core Components:**
  - `ContractList`: Displays the list of client contracts.
  - `ContractCard`: A reusable component for displaying individual contract details.
  - `FilterBar`: Provides filtering options for the contract list.
  - `SortMenu`: Allows users to sort contracts based on different criteria.

- **Reusable Components:**
  - `ContractCard`: Can be reused across different pages or sections where contract details need to be displayed.
  - `FilterBar` and `SortMenu`: Reusable for filtering and sorting in other pages.

- **Component Interactions:**
  - `ContractList` fetches data and renders `ContractCard` components for each contract.
  - `FilterBar` and `SortMenu` update the state in `ContractList`, triggering re-renders with filtered/sorted data.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - Users can filter and sort contracts without navigating away from the page.
  - Clicking on a specific contract can provide more detailed information.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #1976D2 (Blue)
  - **Secondary Colour:** #FFFFFF (White)
  - **Accent Colour:** #FF4081 (Pink)
  - **Background Colour:** #F5F5F5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976D2 (Blue)

#### Relevant File Paths:
- `src/pages/ContractStatus.js`
- `src/components/ContractList.js`
- `src/components/ContractCard.js`
- `src/components/FilterBar.js`
- `src/components/SortMenu.js`

---

### PAGE: Analytics

#### Overview:
- **Purpose:** The Analytics page provides charts and graphs for engagement trends and performance metrics, allowing users to analyze client interactions and engagement over time. It offers customizable filters and sorting options for detailed analysis.
- **Core Functionality:** 
  - Display charts and graphs for engagement trends and performance metrics.
  - Provide filtering and sorting options for data analysis.
  - Allow users to customize the data displayed in the charts.
- **Target Users:** 
  - Account managers analyzing client engagement trends.
  - Sales representatives tracking performance metrics.
  - Managers overseeing overall client engagement and performance.

#### Functional Specification:
- **Key Features:**
  - **Engagement Charts:** Show charts and graphs for client engagement trends.
  - **Performance Metrics:** Display performance metrics using visual aids.
  - **Customizable Filters:** Enable users to filter and sort data for detailed analysis.

- **Data Handling:**
  - Use dummy data to simulate engagement and performance metrics.
  - Data is processed in memory for filtering and sorting.

- **User Interactions:**
  - Users can customize the data displayed in the charts using filters.
  - Sorting options allow users to arrange data based on different metrics.

- **Business Logic Implementation:**
  - Logic for generating charts and graphs based on engagement data.
  - Conditional rendering based on filter and sort criteria.

- **State Management:**
  - Use React's `useState` and `useEffect` hooks to manage engagement data and UI state.
  - Maintain state for engagement metrics, current filters, and sorting criteria.

#### Component Breakdown:
- **Core Components:**
  - `EngagementCharts`: Displays charts and graphs for engagement trends.
  - `PerformanceMetrics`: Shows performance metrics using visual aids.
  - `FilterBar`: Provides filtering options for the data.
  - `SortMenu`: Allows users to sort data based on different criteria.

- **Reusable Components:**
  - `EngagementCharts` and `PerformanceMetrics`: Can be reused to display different types of data.
  - `FilterBar` and `SortMenu`: Reusable for filtering and sorting in other pages.

- **Component Interactions:**
  - `EngagementCharts` and `PerformanceMetrics` fetch data and render visualizations.
  - `FilterBar` and `SortMenu` update the state in `EngagementCharts` and `PerformanceMetrics`, triggering re-renders with filtered/sorted data.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - Users can customize the data displayed in the charts using filters and sorting options without navigating away from the page.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #1976D2 (Blue)
  - **Secondary Colour:** #FFFFFF (White)
  - **Accent Colour:** #FF4081 (Pink)
  - **Background Colour:** #F5F5F5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976D2 (Blue)

#### Relevant File Paths:
- `src/pages/Analytics.js`
- `src/components/EngagementCharts.js`
- `src/components/PerformanceMetrics.js`
- `src/components/FilterBar.js`
- `src/components/SortMenu.js`### PAGE: Client Overview

**Overview:**
- **Purpose:** The Client Overview page provides a high-level summary of all clients. It aims to offer a quick snapshot of key metrics such as client status, recent interactions, and contract details, as well as visual indicators for upcoming meetings or renewals.
- **Core Functionality:** Display essential client information using visual indicators and summaries. Users can quickly grasp the current state of client relationships and upcoming actions required.
- **Target Users:** Account managers, sales teams, and client relationship managers who need a quick overview of all clients and their statuses.

**Functional Specification:**
- **Key Features:**
  - **Client Summaries:** Show a list of clients with key metrics such as status, recent interactions, and contract details.
  - **Visual Indicators:** Use icons or badges to indicate meetings, renewals, or other important events.
  - **Search and Filter:** Allow users to search and filter clients by various criteria like status, interaction date, etc.
  
- **Data Handling:**
  - **Data Storage:** Use in-memory dummy data to simulate client information.
  - **Data Manipulation:** Filtering and searching functionalities will process data on the client side.

- **User Interactions:**
  - **Search Box:** Users can type to search clients by name.
  - **Filters:** Dropdowns or checkboxes for filtering clients based on different criteria.
  - **Click Events:** Clicking on a client entry to view more details.

- **Business Logic Implementation:**
  - **Status Indicators:** Logic to set visual indicators based on client status or upcoming events.
  - **Data Filtering:** Functions to filter and search through the client data.

- **State Management:**
  - **State Hooks:** Use React's `useState` and `useEffect` hooks to manage state.
  - **Context API (if needed):** For global state management if multiple components need to share state.

**Component Breakdown:**
- **Core Components:**
  - **ClientSummaryList:** Displays a list of client summaries.
  - **ClientSummaryItem:** Individual client summary item.
  - **SearchBar:** Component for searching clients.
  - **FilterPanel:** Component for filtering clients.

- **Reusable Components:**
  - **VisualIndicator:** Small component to show visual indicators like badges or icons.
  - **ClientDetailModal:** Modal to show detailed client information when a client entry is clicked.

- **Component Interactions:**
  - **SearchBar â†’ ClientSummaryList:** Search updates the list of clients displayed.
  - **FilterPanel â†’ ClientSummaryList:** Filters update the list of clients displayed.
  - **ClientSummaryItem â†’ ClientDetailModal:** Clicking an item opens the detail modal.

**Navigation Flow:**
- **Intra-Page Navigation:**
  - **Search and Filter:** Users can search or filter clients, updating the displayed list dynamically.
  - **Detail View:** Clicking a client entry opens a modal with detailed information about the client.

**Styling (For Contextual Consistency):**
- **General Colour Scheme:**
  - **Primary Colour:** #1976d2 (Blue)
  - **Secondary Colour:** #ffffff (White)
  - **Accent Colour:** #ff9800 (Orange)
  - **Background Colour:** #f5f5f5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976d2 (Blue)

**File Paths:**

- `src/components/ClientOverview/ClientOverview.jsx`
- `src/components/ClientOverview/ClientSummaryList.jsx`
- `src/components/ClientOverview/ClientSummaryItem.jsx`
- `src/components/ClientOverview/SearchBar.jsx`
- `src/components/ClientOverview/FilterPanel.jsx`
- `src/components/ClientOverview/ClientDetailModal.jsx`

---

### PAGE: Interaction History

**Overview:**
- **Purpose:** The Interaction History page provides metrics on client interactions such as meetings, calls, and emails, with visual representations like progress bars and pie charts.
- **Core Functionality:** Track and display client interaction metrics, allowing users to analyze engagement levels and interaction types.
- **Target Users:** Account managers, sales teams, and client relationship managers who need to track and analyze client interactions.

**Functional Specification:**
- **Key Features:**
  - **Interaction Metrics:** Display metrics for meetings, calls, emails, etc.
  - **Visual Representations:** Use progress bars and pie charts to visualize interaction data.
  - **Date Range Filter:** Allow users to filter interactions by date range.

- **Data Handling:**
  - **Data Storage:** Use in-memory dummy data to represent interaction metrics.
  - **Data Manipulation:** Filtering interactions by date and type on the client side.

- **User Interactions:**
  - **Date Picker:** Users can select a date range to filter interaction metrics.
  - **Hover/Click Events:** Hovering or clicking on charts for more detailed information or tooltips.

- **Business Logic Implementation:**
  - **Chart Updates:** Logic to update charts based on selected date range or interaction type.
  - **Data Aggregation:** Functions to aggregate interaction data for visualization.

- **State Management:**
  - **State Hooks:** Use React's `useState` and `useEffect` hooks to manage state.
  - **Context API (if needed):** For global state management if multiple components need to share state.

**Component Breakdown:**
- **Core Components:**
  - **InteractionMetrics:** Displays aggregated interaction metrics.
  - **InteractionChart:** Visualizes interaction data using Recharts.
  - **DateRangePicker:** Component for selecting date ranges.

- **Reusable Components:**
  - **Tooltip:** Component for displaying detailed information on hover.
  - **ProgressBar:** Component for visualizing progress metrics.

- **Component Interactions:**
  - **DateRangePicker â†’ InteractionMetrics:** Updating the date range filters the interaction metrics displayed.
  - **InteractionMetrics â†’ InteractionChart:** Metrics update the charts displayed.

**Navigation Flow:**
- **Intra-Page Navigation:**
  - **Date Filtering:** Users can filter interactions by date range, updating the displayed metrics and charts dynamically.
  - **Detailed View:** Hovering or clicking on charts shows more detailed information or tooltips.

**Styling (For Contextual Consistency):**
- **General Colour Scheme:**
  - **Primary Colour:** #1976d2 (Blue)
  - **Secondary Colour:** #ffffff (White)
  - **Accent Colour:** #ff9800 (Orange)
  - **Background Colour:** #f5f5f5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976d2 (Blue)

**File Paths:**

- `src/components/InteractionHistory/InteractionHistory.jsx`
- `src/components/InteractionHistory/InteractionMetrics.jsx`
- `src/components/InteractionHistory/InteractionChart.jsx`
- `src/components/InteractionHistory/DateRangePicker.jsx`
- `src/components/InteractionHistory/Tooltip.jsx`
- `src/components/InteractionHistory/ProgressBar.jsx`

---

### PAGE: Contract Status

**Overview:**
- **Purpose:** The Contract Status page provides an overview of client contracts and their renewal statuses, highlighting contracts nearing expiration.
- **Core Functionality:** Display contract details and renewal statuses, with visual indicators for contracts nearing expiration.
- **Target Users:** Account managers, legal teams, and contract managers who need to monitor contract statuses and upcoming renewals.

**Functional Specification:**
- **Key Features:**
  - **Contract Overview:** Display a list of client contracts with details and statuses.
  - **Renewal Indicators:** Highlight contracts that are nearing expiration or due for renewal.
  - **Search and Filter:** Allow users to search and filter contracts by various criteria.

- **Data Handling:**
  - **Data Storage:** Use in-memory dummy data to simulate contract information.
  - **Data Manipulation:** Filtering and searching functionalities will process data on the client side.

- **User Interactions:**
  - **Search Box:** Users can type to search contracts by client name.
  - **Filters:** Dropdowns or checkboxes for filtering contracts based on different criteria.
  - **Click Events:** Clicking on a contract entry to view more details.

- **Business Logic Implementation:**
  - **Renewal Indicators:** Logic to set visual indicators for contracts nearing expiration.
  - **Data Filtering:** Functions to filter and search through the contract data.

- **State Management:**
  - **State Hooks:** Use React's `useState` and `useEffect` hooks to manage state.
  - **Context API (if needed):** For global state management if multiple components need to share state.

**Component Breakdown:**
- **Core Components:**
  - **ContractList:** Displays a list of client contracts.
  - **ContractItem:** Individual contract item.
  - **SearchBar:** Component for searching contracts.
  - **FilterPanel:** Component for filtering contracts.

- **Reusable Components:**
  - **RenewalIndicator:** Small component to show visual indicators for renewals.
  - **ContractDetailModal:** Modal to show detailed contract information when a contract entry is clicked.

- **Component Interactions:**
  - **SearchBar â†’ ContractList:** Search updates the list of contracts displayed.
  - **FilterPanel â†’ ContractList:** Filters update the list of contracts displayed.
  - **ContractItem â†’ ContractDetailModal:** Clicking an item opens the detail modal.

**Navigation Flow:**
- **Intra-Page Navigation:**
  - **Search and Filter:** Users can search or filter contracts, updating the displayed list dynamically.
  - **Detail View:** Clicking a contract entry opens a modal with detailed information about the contract.

**Styling (For Contextual Consistency):**
- **General Colour Scheme:**
  - **Primary Colour:** #1976d2 (Blue)
  - **Secondary Colour:** #ffffff (White)
  - **Accent Colour:** #ff9800 (Orange)
  - **Background Colour:** #f5f5f5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976d2 (Blue)

**File Paths:**

- `src/components/ContractStatus/ContractStatus.jsx`
- `src/components/ContractStatus/ContractList.jsx`
- `src/components/ContractStatus/ContractItem.jsx`
- `src/components/ContractStatus/SearchBar.jsx`
- `src/components/ContractStatus/FilterPanel.jsx`
- `src/components/ContractStatus/ContractDetailModal.jsx`

---

### PAGE: Analytics

**Overview:**
- **Purpose:** The Analytics page provides charts and graphs for engagement trends and performance metrics, with customizable filters and sorting options.
- **Core Functionality:** Display analytical data through various charts and graphs, allowing users to filter and sort data to gain insights.
- **Target Users:** Business analysts, account managers, and executives who need to analyze client engagement and performance trends.

**Functional Specification:**
- **Key Features:**
  - **Engagement Trends:** Display charts and graphs for client engagement trends.
  - **Performance Metrics:** Show performance metrics through visualizations.
  - **Customizable Filters:** Allow users to filter and sort data by various criteria.

- **Data Handling:**
  - **Data Storage:** Use in-memory dummy data to simulate analytical data.
  - **Data Manipulation:** Filtering and sorting functionalities will process data on the client side.

- **User Interactions:**
  - **Filter Options:** Dropdowns or checkboxes for filtering data.
  - **Sort Options:** Buttons or dropdowns for sorting data.
  - **Hover/Click Events:** Hovering or clicking on charts for more detailed information or tooltips.

- **Business Logic Implementation:**
  - **Chart Updates:** Logic to update charts based on selected filters or sorting options.
  - **Data Aggregation:** Functions to aggregate analytical data for visualization.

- **State Management:**
  - **State Hooks:** Use React's `useState` and `useEffect` hooks to manage state.
  - **Context API (if needed):** For global state management if multiple components need to share state.

**Component Breakdown:**
- **Core Components:**
  - **AnalyticsCharts:** Displays various charts and graphs for analytical data.
  - **FilterPanel:** Component for filtering analytical data.
  - **SortPanel:** Component for sorting analytical data.

- **Reusable Components:**
  - **Tooltip:** Component for displaying detailed information on hover.
  - **Chart:** Generic chart component to be reused for different types of charts.

- **Component Interactions:**
  - **FilterPanel â†’ AnalyticsCharts:** Filtering updates the charts displayed.
  - **SortPanel â†’ AnalyticsCharts:** Sorting updates the charts displayed.

**Navigation Flow:**
- **Intra-Page Navigation:**
  - **Filter and Sort:** Users can filter or sort analytical data, updating the displayed charts dynamically.
  - **Detailed View:** Hovering or clicking on charts shows more detailed information or tooltips.

**Styling (For Contextual Consistency):**
- **General Colour Scheme:**
  - **Primary Colour:** #1976d2 (Blue)
  - **Secondary Colour:** #ffffff (White)
  - **Accent Colour:** #ff9800 (Orange)
  - **Background Colour:** #f5f5f5 (Light Grey)
  - **Text Colour:** #212121 (Dark Grey)
  - **Link Colour:** #1976d2 (Blue)

**File Paths:**

- `src/components/Analytics/Analytics.jsx`
- `src/components/Analytics/AnalyticsCharts.jsx`
- `src/components/Analytics/FilterPanel.jsx`
- `src/components/Analytics/SortPanel.jsx`
- `src/components/Analytics/Tooltip.jsx`
- `src/components/Analytics/Chart.jsx`

### PAGE: Client Overview

#### Overview:
- **Purpose:** The Client Overview page serves as a high-level summary of all clients managed by the organization. It provides quick access to key metrics such as client status, recent interactions, and contract details. This page aims to offer a centralized view to monitor client health and identify any immediate actions required, such as upcoming renewals or scheduled meetings.
- **Core Functionality:** The essential functions include displaying a list of all clients with their respective statuses, recent interactions, and contract details. Users can quickly glance at visual indicators for upcoming meetings or renewals.
- **Target Users:** The primary users are account managers and client relationship managers who need to keep track of multiple clients and their engagements efficiently.

#### Functional Specification:
- **Key Features:**
  - **Client List:** A table or grid displaying all clients with columns for client name, status, recent interactions, and contract details.
  - **Visual Indicators:** Icons or color-coding to highlight clients with upcoming meetings or contract renewals.
  - **Sorting and Filtering:** Options to sort and filter clients based on various criteria like status, recent interactions, and contract expiry dates.
- **Data Handling:** 
  - **In-Memory Data:** Dummy data stored in the component state.
  - **Data Manipulation:** Functions to sort, filter, and highlight data based on user actions.
- **User Interactions:**
  - **Table Interactions:** Clicking on column headers to sort, using dropdowns or checkboxes to filter.
  - **Hover Effects:** Displaying additional client information on hover.
- **Business Logic Implementation:**
  - **Sorting:** Logic to sort clients alphabetically, by status, or by recent interactions.
  - **Filtering:** Logic to filter clients based on status (active, inactive) and contract renewal dates.
- **State Management:**
  - **Component State:** Use of React's `useState` for managing the list of clients, sorting criteria, and filter options.
  - **Effect Hooks:** Use of `useEffect` to handle any dynamic updates or changes to the data.

#### Component Breakdown:
- **Core Components:**
  - **ClientTable:** Displays the list of clients with sortable and filterable columns.
  - **ClientRow:** Represents individual client information within the table.
  - **ClientIndicators:** Displays visual indicators for meetings or renewals.
- **Reusable Components:**
  - **SortFilterControls:** A component for sorting and filtering options, reusable across other pages.
  - **Tooltip:** A component for displaying additional information on hover.
- **Component Interactions:**
  - **Data Flow:** `ClientTable` receives data from the parent component and passes individual client data to `ClientRow`.
  - **User Actions:** Sorting and filtering options in `SortFilterControls` update the state, triggering re-rendering of `ClientTable`.

#### Navigation Flow:
- **Intra-Page Navigation:** 
  - **Client Details Modal:** Clicking on a client row opens a modal with detailed information about the client.
  - **Sorting/Filtering Controls:** Available at the top of the page, affecting the displayed data in `ClientTable`.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #007BFF (Blue)
  - **Secondary Colour:** #6C757D (Grey)
  - **Accent Colour:** #28A745 (Green)
  - **Background Colour:** #FFFFFF (White)
  - **Text Colour:** #212529 (Dark Grey)
  - **Link Colour:** #007BFF (Blue)

#### Relevant File Paths:
- **/src/pages/ClientOverview.js:** Main file for the Client Overview page.
- **/src/components/ClientTable.js:** Table component for displaying clients.
- **/src/components/ClientRow.js:** Individual client row component.
- **/src/components/ClientIndicators.js:** Component for visual indicators.
- **/src/components/SortFilterControls.js:** Sorting and filtering controls.
- **/src/components/Tooltip.js:** Tooltip component for hover information.

### PAGE: Interaction History

#### Overview:
- **Purpose:** The Interaction History page provides detailed metrics on client interactions such as meetings, calls, and emails. It visually represents these metrics through progress bars and pie charts to help users assess engagement levels and identify trends.
- **Core Functionality:** The page aggregates interaction data, presents it in a visually appealing manner, and allows users to filter and sort the information based on various parameters.
- **Target Users:** Account managers, client relationship managers, and analysts who need to monitor and evaluate the frequency and quality of client interactions.

#### Functional Specification:
- **Key Features:**
  - **Interaction Metrics:** Display metrics for meetings, calls, and emails.
  - **Visual Representations:** Use progress bars and pie charts for a visual summary.
  - **Filtering Options:** Filters to view interactions by client, type, and date range.
- **Data Handling:**
  - **In-Memory Data:** Use of dummy data stored in the component state.
  - **Data Manipulation:** Functions to filter and aggregate interaction data.
- **User Interactions:**
  - **Chart Interactions:** Clicking on sections of pie charts to drill down into details.
  - **Filtering Controls:** Dropdowns and date pickers to filter interaction data.
- **Business Logic Implementation:**
  - **Data Aggregation:** Logic to aggregate interaction data by type and date range.
  - **Filtering:** Logic to filter interactions based on user-selected criteria.
- **State Management:**
  - **Component State:** Use of React's `useState` for managing interaction data, filters, and chart settings.
  - **Effect Hooks:** Use of `useEffect` for updating charts based on filter changes.

#### Component Breakdown:
- **Core Components:**
  - **InteractionMetrics:** Displays the overall metrics for different types of interactions.
  - **InteractionChart:** A pie chart or bar chart representing interaction data.
  - **FilterControls:** Controls for filtering interaction data.
- **Reusable Components:**
  - **DateRangePicker:** A component for selecting date ranges, reusable across other pages.
  - **ChartLegend:** A legend component for chart explanations, reusable across other charts.
- **Component Interactions:**
  - **Data Flow:** `InteractionMetrics` passes aggregated data to `InteractionChart`.
  - **User Actions:** Filter options in `FilterControls` update the state, triggering re-rendering of `InteractionMetrics` and `InteractionChart`.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - **Detailed View Modal:** Clicking on a chart segment opens a modal with detailed interaction information.
  - **Filter Controls:** Available at the top of the page, affecting the displayed data in `InteractionMetrics` and `InteractionChart`.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #007BFF (Blue)
  - **Secondary Colour:** #6C757D (Grey)
  - **Accent Colour:** #17A2B8 (Cyan)
  - **Background Colour:** #FFFFFF (White)
  - **Text Colour:** #212529 (Dark Grey)
  - **Link Colour:** #007BFF (Blue)

#### Relevant File Paths:
- **/src/pages/InteractionHistory.js:** Main file for the Interaction History page.
- **/src/components/InteractionMetrics.js:** Component for displaying interaction metrics.
- **/src/components/InteractionChart.js:** Component for visualizing interaction data.
- **/src/components/FilterControls.js:** Filtering controls for interactions.
- **/src/components/DateRangePicker.js:** Date range picker component.
- **/src/components/ChartLegend.js:** Legend component for charts.

### PAGE: Contract Status

#### Overview:
- **Purpose:** The Contract Status page provides an overview of all client contracts and their renewal statuses. It highlights contracts that are nearing expiration, enabling proactive management and renewal processes.
- **Core Functionality:** The page displays a list of contracts with their statuses and highlights critical contracts that need attention. It also offers filtering and sorting options based on contract details.
- **Target Users:** Contract managers, account managers, and client relationship managers who need to oversee contract lifecycles and ensure timely renewals.

#### Functional Specification:
- **Key Features:**
  - **Contract List:** A table displaying all contracts with columns for client, contract status, expiration date, and renewal status.
  - **Highlighting Critical Contracts:** Visual indicators for contracts nearing expiration or needing renewal.
  - **Sorting and Filtering:** Options to sort and filter contracts based on various criteria.
- **Data Handling:**
  - **In-Memory Data:** Use of dummy data stored in the component state.
  - **Data Manipulation:** Functions to sort, filter, and highlight contracts.
- **User Interactions:**
  - **Table Interactions:** Clicking on column headers to sort, using dropdowns or checkboxes to filter.
  - **Hover Effects:** Displaying additional contract information on hover.
- **Business Logic Implementation:**
  - **Sorting:** Logic to sort contracts by client, status, or expiration date.
  - **Filtering:** Logic to filter contracts based on status (active, expired) and renewal dates.
- **State Management:**
  - **Component State:** Use of React's `useState` for managing the list of contracts, sorting criteria, and filter options.
  - **Effect Hooks:** Use of `useEffect` to handle any dynamic updates or changes to the data.

#### Component Breakdown:
- **Core Components:**
  - **ContractTable:** Displays the list of contracts with sortable and filterable columns.
  - **ContractRow:** Represents individual contract information within the table.
  - **ContractIndicators:** Displays visual indicators for nearing expiration or needing renewal.
- **Reusable Components:**
  - **SortFilterControls:** A component for sorting and filtering options, reusable across other pages.
  - **Tooltip:** A component for displaying additional information on hover.
- **Component Interactions:**
  - **Data Flow:** `ContractTable` receives data from the parent component and passes individual contract data to `ContractRow`.
  - **User Actions:** Sorting and filtering options in `SortFilterControls` update the state, triggering re-rendering of `ContractTable`.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - **Contract Details Modal:** Clicking on a contract row opens a modal with detailed information about the contract.
  - **Sorting/Filtering Controls:** Available at the top of the page, affecting the displayed data in `ContractTable`.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #007BFF (Blue)
  - **Secondary Colour:** #6C757D (Grey)
  - **Accent Colour:** #FFC107 (Yellow)
  - **Background Colour:** #FFFFFF (White)
  - **Text Colour:** #212529 (Dark Grey)
  - **Link Colour:** #007BFF (Blue)

#### Relevant File Paths:
- **/src/pages/ContractStatus.js:** Main file for the Contract Status page.
- **/src/components/ContractTable.js:** Table component for displaying contracts.
- **/src/components/ContractRow.js:** Individual contract row component.
- **/src/components/ContractIndicators.js:** Component for visual indicators.
- **/src/components/SortFilterControls.js:** Sorting and filtering controls.
- **/src/components/Tooltip.js:** Tooltip component for hover information.

### PAGE: Analytics

#### Overview:
- **Purpose:** The Analytics page provides detailed charts and graphs for engagement trends and performance metrics. It allows users to apply customizable filters and sorting options to analyze client data effectively.
- **Core Functionality:** The page aggregates various performance metrics, visualizes them using charts and graphs, and allows users to customize the view based on their needs.
- **Target Users:** Analysts, account managers, and client relationship managers who need to deep dive into client engagement data and performance metrics.

#### Functional Specification:
- **Key Features:**
  - **Engagement Trends:** Visual representations of engagement trends over time.
  - **Performance Metrics:** Charts and graphs highlighting key performance indicators.
  - **Customizable Filters:** Options to filter and sort data based on various parameters.
- **Data Handling:**
  - **In-Memory Data:** Use of dummy data stored in the component state.
  - **Data Manipulation:** Functions to filter, sort, and aggregate performance data.
- **User Interactions:**
  - **Chart Interactions:** Clicking on chart elements to drill down into detailed data.
  - **Filtering Controls:** Dropdowns, sliders, and checkboxes to customize the data view.
- **Business Logic Implementation:**
  - **Data Aggregation:** Logic to aggregate performance data by various dimensions.
  - **Filtering:** Logic to filter and sort data based on user-selected criteria.
- **State Management:**
  - **Component State:** Use of React's `useState` for managing performance data, filters, and chart settings.
  - **Effect Hooks:** Use of `useEffect` for updating charts based on filter changes.

#### Component Breakdown:
- **Core Components:**
  - **TrendChart:** Displays engagement trends over time.
  - **PerformanceChart:** A bar chart or line chart representing key performance metrics.
  - **FilterControls:** Controls for customizing the data view.
- **Reusable Components:**
  - **DateRangePicker:** A component for selecting date ranges, reusable across other pages.
  - **ChartLegend:** A legend component for chart explanations, reusable across other charts.
- **Component Interactions:**
  - **Data Flow:** `TrendChart` and `PerformanceChart` receive aggregated data from the parent component.
  - **User Actions:** Filter options in `FilterControls` update the state, triggering re-rendering of `TrendChart` and `PerformanceChart`.

#### Navigation Flow:
- **Intra-Page Navigation:**
  - **Detailed Data Modal:** Clicking on chart elements opens a modal with detailed data.
  - **Filter Controls:** Available at the top of the page, affecting the displayed data in `TrendChart` and `PerformanceChart`.

#### Styling (For Contextual Consistency):
- **General Colour Scheme:**
  - **Primary Colour:** #007BFF (Blue)
  - **Secondary Colour:** #6C757D (Grey)
  - **Accent Colour:** #17A2B8 (Cyan)
  - **Background Colour:** #FFFFFF (White)
  - **Text Colour:** #212529 (Dark Grey)
  - **Link Colour:** #007BFF (Blue)

#### Relevant File Paths:
- **/src/pages/Analytics.js:** Main file for the Analytics page.
- **/src/components/TrendChart.js:** Component for displaying engagement trends.
- **/src/components/PerformanceChart.js:** Component for visualizing performance metrics.
- **/src/components/FilterControls.js:** Filtering controls for customizing data view.
- **/src/components/DateRangePicker.js:** Date range picker component.
- **/src/components/ChartLegend.js:** Legend component for charts.